#!usr/bin/python3
import datetime
import hashlib
import string
import os
import time

from flask import Flask, request
import peewee as pw
import telebot

from database import Users
from logger import main_log
import config

main_log.info("Program starting")

TELEGRAM_API = os.environ["telegram_token"]
bot = telebot.TeleBot(TELEGRAM_API)

@bot.message_handler(commands=["start"])
def start(msg):
	main_log.info("Starting func 'start'")

	bot.send_message(msg.chat.id, "–î–µ–ª–∏—Ç–µ—Å—å –Ω–æ–≤–æ—Å—Ç—è–º–∏, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ, –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ –æ–±—â–∞–π—Ç–µ—Å—å, –∞ –Ω–∞—à –ë–æ—Ç –≤ —ç—Ç–æ–º –≤–∞–º –ø–æ–º–æ–∂–µ—Ç!")
	selected_user = Users.select().where(
		Users.userid == msg.from_user.id)
	if not selected_user:
		insert_user(msg.from_user)
	main(msg)
		
@bot.message_handler(commands=["main"])
def main(msg):
	keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
	servise = telebot.types.KeyboardButton(text="üîò –°–µ—Ä–≤–∏—Å—ã")
	newsadd = telebot.types.KeyboardButton(text="–ü—Ä–∏—Å–ªa—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
	cat = telebot.types.KeyboardButton(text="üìÇÔ∏è –ì—Ä—É–ø–ø—ã")
	loveadd = telebot.types.KeyboardButton(text="‚ù§Ô∏è –õ—é–±–æ–≤—å")
	keyboard.add(servise, cat, loveadd, newsadd)
	bot.send_message(msg.chat.id, "–û—Ç–ø—Ä–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚¨áÔ∏è", reply_markup=keyboard)

def insert_user(user):
	main_log.info("Starting func 'insert_user'")
	new_user = Users.create(
				userid=user.id)
	new_user.save()


@bot.message_handler(commands=["love"])
def addlove(msg):
	chanel ="–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö @love_khv –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\
\n\n‚Ä¢ –ø—Ä–∏—Å–ª–∞—Ç—å –§–æ—Ç–æ\
\n‚Ä¢ –∏–Ω—Ñ—É –û —Å–µ–±–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\
\n‚Ä¢ –ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–ºÔ∏è"
	bot.send_message(msg.chat.id, f"{chanel}", parse_mode="HTML")
	main(msg)
	
@bot.message_handler(commands=["news"])
def addnews(msg):
	chanel ="–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ù–æ–≤–æ—Å—Ç—è—Ö @khv_news –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\
\n\n‚Ä¢ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö —á—Ç–æ –∏ –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ–¥–Ω–∏–º-–¥–≤—É–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\
\n‚Ä¢ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\
\n‚Ä¢ —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µÔ∏è"
	bot.send_message(msg.chat.id, f"{chanel}", parse_mode="HTML")
	main(msg)


@bot.message_handler(commands=["chats"])
def chats(msg):
	chanel = "‚Ä¢ <b>–ß–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã –•–∞–±–∞—Ä–æ–≤—Å–∫–∞</b>\
\n\n@khvchat - —Å–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π —á–∞—Ç –•–∞–±–∞—Ä–æ–≤—Å–∫–∞\
\n\n@dvchat - —á–∞—Ç –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞\
\n\n@market27 - –¥–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\
\n\n@khvjob - —Ä–∞–±–æ—Ç–∞: –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ\
\n\n<b>‚Ä¢ –ö–∞–Ω–∞–ª—ã –•–∞–±–∞—Ä–æ–≤—Å–∫–∞</b>\
\n\n@khv_news - –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –•–∞–±–∞—Ä–æ–≤—Å–∫–∞\
\n\n@love_khv - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\
\n\n@j_crush - –æ –•–∞–±–∞—Ä–æ–≤—Å–∫–µ\
\n\n@khabara_ru - –æ–±—ä—è–≤–ª–µ–Ω–∏—è –•–∞–±–∞—Ä–æ–≤—Å–∫\
\n\n@stfw_ru - IT-–Ω–æ–≤–æ—Å—Ç–∏"
	bot.send_message(msg.chat.id, f"{chanel}", parse_mode="HTML")
	main(msg)

@bot.message_handler(commands=["serv"])
def serv(msg):
	markup = telebot.types.InlineKeyboardMarkup()
	button1 = telebot.types.InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="–ü–æ–≥–æ–¥–∞") 
	button2 = telebot.types.InlineKeyboardButton(text="–ê—Ñ–∏—à–∞", callback_data="–ê—Ñ–∏—à–∞")
	button3 = telebot.types.InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏", callback_data="–ù–æ–≤–æ—Å—Ç–∏") 
	markup.add(button1, button2,button3)
	bot.send_message(chat_id=msg.chat.id, text="–û—Ç–ø—Ä–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Ô∏è", reply_markup=markup)
@bot.callback_query_handler(func=lambda call: True)
def longname(call):
	if call.data == "–ü–æ–≥–æ–¥–∞":
		bot.send_message(call.message.chat.id, f"<a href='https://khabara.ru/weather.html?{datetime.datetime.today()}'>üå°</a>", parse_mode="HTML")

@bot.message_handler(commands=["s"])
def send(msg):
	if msg.from_user.id not in config.gods:
		return
	if len(msg.text.split()) == 1:
		return
	selected_user = Users.select() 

	for i,user in enumerate(selected_user):
		try:
			if i % 20 == 0:
				time.sleep(1)
			bot.send_message(user.userid, msg.text[2:], parse_mode="HTML" )
		except:
			continue

	

@bot.message_handler(content_types=['text', 'document', 'photo', 'audio', 'video','voice'])
def all_messages(msg):
	TO_CHAT_ID= -542531596
		
	if msg.text == "–ü—Ä–∏—Å–ªa—Ç—å –Ω–æ–≤–æ—Å—Ç—å":
		addnews(msg)
		return
	if msg.text == "üîò –°–µ—Ä–≤–∏—Å—ã":
		serv(msg)
		return
	if msg.text == "‚ù§Ô∏è –õ—é–±–æ–≤—å":
		addlove(msg)
		return
	if msg.text == "üìÇÔ∏è –ì—Ä—É–ø–ø—ã":
		chats(msg)
		return

	
	if msg.chat.id == TO_CHAT_ID:
		bot.forward_message(msg.reply_to_message.forward_from.id, msg.chat.id, msg.message_id)
		bot.send_message(TO_CHAT_ID, "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	else:
		bot.forward_message(TO_CHAT_ID, msg.chat.id, msg.message_id)
		bot.send_message(msg.chat.id, f"{msg.from_user.first_name} –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")
	main(msg)
        
	"""	
def is_subscribed(chat_id, user_id):
    try:
        bot.get_chat_member(chat_id, user_id)
        return True
    except ApiTelegramException as e:
        if e.result_json['description'] == 'Bad Request: user not found':
            return False

if not is_subscribed(CHAT_ID, USER_ID):
    # user is not subscribed. send message to the user
    bot.send_message(CHAT_ID, 'Please subscribe to the channel')
else:
    # user is subscribed. continue with the rest of the logic
    # ...
"""

# bot.polling(none_stop=True)


# –î–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
server = Flask(__name__)


@server.route("/bot", methods=['POST'])
def get_message():
	""" TODO """
	decode_json = request.stream.read().decode("utf-8")
	bot.process_new_updates([telebot.types.Update.de_json(decode_json)])
	return "!", 200


@server.route("/")
def webhook_add():
	""" TODO """
	bot.remove_webhook()
	bot.set_webhook(url=config.url)
	return "!", 200

@server.route("/<password>")
def webhook_rem(password):
	""" TODO """
	password_hash = hashlib.md5(bytes(password, encoding="utf-8")).hexdigest()
	if password_hash == "5b4ae01462b2930e129e31636e2fdb68":
		bot.remove_webhook()
		return "Webhook removed", 200
	else:
		return "Invalid password", 200


server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
